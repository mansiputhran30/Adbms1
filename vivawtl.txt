Node.js is a cross-platform runtime environment that allows you to create server-side and networking applications. 

Modules=========>Include Module=========>require
Frequently used modules
-http
-fs
-express
-event
-net

An event emitter is an object that — as the name says — emits events. An
event listener is a part of the code that binds to the event emitter and
listens for certain types of events

Events
Node.js uses event driven programming. It means as soon as Node starts its server, it
simply initiates its variables, declares functions and then simply waits for event to
occur. It is the one of the reason why Node.js is pretty fast compared to other similar
technologies.

Event Emitter
When an EventEmitter instance faces any error, it emits an 'error' event. When a new
listener is added, 'newListener' event is fired and when a listener is removed,
'removeListener' event is fired.
-EventEmitter provides multiple properties like on and emit. 
1. on property is used to bind a function with the event and 
2. emit is used to fire an event.

There are two common patterns that can be used to raise and bind an event using EventEmitter class in Node.js.
1. Return EventEmitter from a function
2. Extend the EventEmitter class

EventEmitter class to bind event and event listener:
1. // Import events module
var events = require('events');
// Create an eventEmitter object
var eventEmitter = new events.EventEmitter();
To bind event handler with an event:
// Bind event and even handler as follows
eventEmitter.on('eventName', eventHandler);
To fire an event:
// Fire an event
eventEmitter.emit('eventName'); 

File Handling
Reading File
Use fs.readFile() method to read the physical file asynchronously.
Signature:
fs.readFile(fileName [,options], callback)
Parameter Description:
● filename: Full path and name of the file as a string.
● options: The options parameter can be an object or string which can include
encoding and flag. The default encoding is utf8 and default flag is "r".
● callback: A function with two parameters err and fd. This will get called when
readFile operation completes.

Writing File
Use fs.writeFile() method to write data to a file. If file already exists
then it overwrites the existing content otherwise it creates a new file
and writes data into it.
Signature:
fs.writeFile(filename, data[, options], callback)
Parameter Description:
● filename: Full path and name of the file as a string.
● Data: The content to be written in a file.
● options: The options parameter can be an object or string which can include
encoding, mode and flag. The default encoding is utf8 and default flag is "r".
● callback: A function with two parameters err and fd. This will get called when
write operation completes.

Open File
Alternatively, you can open a file for reading or writing using fs.open()
method.
Signature:
fs.open(path, flags[, mode], callback)
Parameter Description:
● path: Full path with name of the file as a string.
● Flag: The flag to perform operation
● Mode: The mode for read, write or readwrite. Defaults to 0666 readwrite.
● callback: A function with two parameters err and fd. This will get called when
file open operation completes.

Delete File
Use fs.unlink() method to delete an existing file.
Signature:
fs.unlink(path, callback);
The following example deletes an existing file.



================Angular Js=================
AngularJS is a JavaScript framework. It can be added to an HTML page
with a <script> tag.
AngularJS extends HTML attributes with Directives, and binds data to HTML
with Expressions.
AngularJS is a JavaScript framework written in JavaScript

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.9/angular
.min.js"></script>

---------MVC Architecture----------
MVC Pattern stands for Model-View-Controller Pattern.
Model - This layer represents an object for carrying data and may hold data
logic to update controller in case of data changes.
View - This layer holds the data presentation that the model contains.
Controller - This is a middleman between model and view and controls the
data flow into data object and updates the view whenever the data is
updated

View--user input--->Controller----modifies---->Model----updates------>View

##ng-directives
The ng-app directive defines root element of an AngularJS application.
The ng-model directive binds the value of HTML controls (input, select,
textarea) to application data.
The ng-bind directive binds application data to the HTML view.
The ng-init directive initializes AngularJS application variables
The ng-repeat directive actually clones HTML elements once for each item in a
collection.
-------------Expressions--------------
AngularJS binds data to HTML using Expressions.
-->{{ expression }}
-->bind="expression"

AngularJS will resolve the expression, and return the result exactly where the
expression is written.

---------------Filters----------------
Built-In Filters
AngularJS provides filters to transform data:
● currency Format a number to a currency format.
● date Format a date to a specified format.
● filter Select a subset of items from an array.
● json Format an object to a JSON string.
● limitTo Limits an array/string, into a specified number of
elements/characters.
● lowercase Format a string to lower case.
● number Format a number to a string.
● orderBy Orders an array by an expression.
● uppercase Format a string to upper case.


-------------conditional directives-------------
The ng-if directive removes the HTML element if the expression evaluates to false.
The ng-if directive is different from the ng-hide, which hides the display of the element, where
the ng-if directive completely removes the element from the DOM.


The ng-style directive specifies the style attribute for the HTML element.
The value of the ng-style attribute must be an object, or an expression returning an object.
The object consists of CSS properties and values, in key value pairs.

==========mouse events==============
Definition and Usage
The ng-mousedown directive tells AngularJS what to do when a mouse
button is clicked on the specific HTML element.
The ng-mousedown directive from AngularJS will not override the element's
original onmousedown event, both will be executed.
The order of a mouse click is:
1. Mousedown
2. Mouseup
3. Click

==========keyboard events==============
The ng-keydown directive tells AngularJS what to do when the
keyboard is used on the specific HTML element.
The ng-keydown directive from AngularJS will not override the
element's original onkeydown event, both will be executed.
The order of a key stroke is:
1. Keydown
2. Keypress
3. Keyup

==============controller===========
AngularJS controllers control the data of AngularJS
applications.
AngularJS controllers are regular JavaScript Objects.
AngularJS applications are controlled by controllers.
The ng-controller directive defines the application controller.
A controller is a JavaScript Object, created by a standard
JavaScript object constructor.

==============$scope object=============
The scope(Model) is a JavaScript object with properties and methods,
which are available for both the view and the controller.The scope is the binding part between the HTML (view) and
the JavaScript (controller).
When you make a controller in AngularJS, you pass
the $scope object as an argument

================root scope==============
Root Scope
All applications have a $rootScope which is the scope created on
the HTML element that contains the ng-app directive.
The rootScope is available in the entire application.
If a variable has the same name in both the current scope and in
the rootScope, the application uses the one in the current scope.

===============behavior to a scope object=======
In order to react to events or execute computation in the view we
must provide behavior to the scope. We add behavior to the
scope by attaching methods to the $scope object. These methods
are then available to be called from the template/view.

===================AngularJs Forms================
AngularJS Forms
Forms in AngularJS provides data-binding and validation of
input controls.

Input Controls
Input controls are the HTML input elements:
● input elements
● select elements
● button elements
● textarea elements


Input controls provides data-binding by using the ngmodel directive.
<input type="text" ng-model="firstname">

-----------selectbox--------------
The property defined in the ng-model attribute will have the value
of the selected option in the selectbox.

----------form validations----------
AngularJS offers client-side form validation.
AngularJS monitors the state of the form and input fields (input,
textarea, select), and lets you notify the user about the current
state.
AngularJS also holds information about whether they have been
touched, or modified, or not.
You can use standard HTML5 attributes to validate input, or you
can make your own validation functions.


----------
Input fields have the following states:
● $untouched The field has not been touched yet
● $touched The field has been touched
● $pristine The field has not been modified yet
● $dirty The field has been modified
● $invalid The field content is not valid
● $valid The field content is valid
They are all properties of the input field, and are
either true or false.
Forms have the following states:
● $pristine No fields have been modified yet
● $dirty One or more have been modified
● $invalid The form content is not valid
● $valid The form content is valid
● $submitted The form is submitted
They are all properties of the form, and are either true or false.

-----------ng-model-options-------------
updateOn : A string value specifying the events in which the input is bound
to. You can specify multiple events using a space delimited list like ngmodel-options="{ updateOn: 'blur mouseover' }"
● debounce: Defines an integer value which denotes a model update delay in
milliseconds. We can set the value to zero if we want to trigger an immediate
update. You can use this option like ng-model-options="{
updateOn: 'blur', debounce: { 'blur': 0} }"
● allowInvalid: It’s a boolean value which indicates that the model value
can be set regardless of the validity of the field. The default value for model is
undefined if we are not specifying the allowInvalid option.
● getterSetter: boolean value used to determine whether to treat function
bound to model as getters or setters or not.
● timezone: Defines the time zone to be used.

-------------Single Page Application-ng-route-------------
AngularJS Routing
The ngRoute module helps your application to become a
Single Page Application.
What is Routing in AngularJS?
If you want to navigate to different pages in your application, but
you also want the application to be a SPA (Single Page
Application), with no page reloading, you can use
the ngRoute module.
The ngRoute module routes your application to different pages
without reloading the entire application.
