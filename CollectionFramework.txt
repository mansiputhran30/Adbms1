--------------------Map Interface-----------------------------
import java.util.*;
public class HashMapApp {
	public static void main(String[] args) {
		HashMap<Integer, String> hash_map = new HashMap<Integer, String>();
 
    		// Mapping string values to int keys
    		hash_map.put(10, "Angel");
    		hash_map.put(30, "Liza");
    		hash_map.put(20, "Steve");
 
    		// Displaying the HashMap
    		for (Map.Entry<Integer, String> e : hash_map.entrySet()) {
			System.out.println(e.getKey() + " " + e.getValue());
 		}
 
    		// Removing the existing key mapping
    		String removed_value = (String)hash_map.remove(20);
 
    		// Verifying the returned value
    		System.out.println("\nRemoved value is: "+ removed_value);
 
    		// Displaying the new map
    		System.out.println("New map is: "+ hash_map);

		//Search for a specific key
		System.out.println("\nHashmap contains key 10: "+hash_map.containsKey(10));
		System.out.println("\nHashmap contains key 60: "+hash_map.containsKey(60));

		//Get value of specified key
		System.out.println("\nThe Value for key 30 is: " + hash_map.get(30));

		HashMap<Integer, String> second_map = new HashMap<Integer, String>();
		hash_map.put(40, "Betty");
		second_map.putAll(hash_map);
		System.out.println("\nSecond map is: "+ second_map);
	}
}


-----------------------------------Set Interface-----------------------------------------------

import java.util.*;

// Main class 
public class SetTest {
    
    // Main driver method
    public static void main(String[] args)
    {
        // Demonstrating Set using HashSet
        // Declaring object of type String 
        Set<String> hash_Set = new HashSet<String>();
  
        // Adding elements to the Set
        // using add() method
        hash_Set.add("Car");
        hash_Set.add("Bike");
        hash_Set.add("Train");
        hash_Set.add("Truck");
        hash_Set.add("Helicopter");

	  //using iterator interface
	  Iterator<String> itr = hash_Set.iterator();

	  while (itr.hasNext()) {
            // Returns the next element.
            System.out.println(itr.next());
        }

        // Printing elements of HashSet object
        System.out.println("\n"+hash_Set);

	  //convert the hashset into an array List
        ArrayList<String> a1 = new ArrayList<String>(hash_Set);
        
        //using Listiterator to traverse through the arrayList
        ListIterator<String> it = a1.listIterator();
        
        //Reverse the ArrayList
	  System.out.println("\nItems in reverse order: ");
        Collections.reverse(a1);
        while(it.hasNext()) {
            System.out.println(it.next());
        }

    }
}


--------------------------

import java.util.*;
public class SetApp {
   public static void main(String args[]) {
      HashSet <String> one = new HashSet <String>();
      HashSet <String> two = new HashSet <String>();
      one.add("English");
      one.add("Maths");
	two.add("Science");
	two.add("History");
	two.add("Geography");
      System.out.println("Set one"+ one);
      System.out.println("Set two: "+ two);

	//Add items from one set to another set
	one.addAll(two);
	System.out.println("Updated Set one: "+one);


	//Remove item from set
	one.remove("English");
	System.out.println("Set after removing "+ "English: " + one);

	//Search particular item from set
	System.out.println("Set contains History: "+one.contains("History"));
   }
}


---------------------------------------Linked List-------------------------------------------------

//Create a Node Class
class Node<T>
{
T data;
Node<T> next;
Node(T data)
{
this.data=data;
this.next=null;
}
}
class MyLinkedList<T>
{
Node<T> head;
int size=0;
MyLinkedList()
{
head=null;
}
void add(T data)
{
//Create a node
Node<T> tmp=new Node<>(data);
if(this.head==null)
{
head=tmp;
}
else
{
Node<T> x=head;
while(x.next!=null)
{
x=x.next;
}
x.next=tmp;
}
size++;
}
int getSize()



{
return this.size;
}
//Adding element in middle
void add(T data,int pos)
{
//insert at the begining
if(pos==1)
{
//store head in tmp
Node<T> tmp=head;
//create new head with new value
head = new Node<T>(data);
//assign old head -tmp to new head
head.next=tmp;
size++;
return;
}
if(pos>size+1)
{
System.out.println("Invalid position");
}
//Adding node in the middle
Node<T> prev=new Node<>(null);
Node<T> tmp=head;
while(pos-1 > 0)
{
prev=tmp;
tmp=tmp.next;
pos--;
}
Node<T> nn=new Node<T>(data);
prev.next=nn;
nn.next=tmp;
size++;
}
public String toString()
{
String result="[" ;
Node<T> x=head;
while(x.next!=null)
{
result=result+String.valueOf(x.data)+"->";
x=x.next;
}
result=result+String.valueOf(x.data);
return result+"]" ;
}
}
class LinkedListImpl

MUMBAI EDUCATIONAL TRUST
MET Institute of Computer Science

{
public static void main(String[] args)
{
MyLinkedList<Integer> l1=new MyLinkedList<>();
l1.add(10);
l1.add(20);
System.out.println("Original List");
System.out.println(l1);
l1.add(05,1);
System.out.println("After Insertion at head");
System.out.println(l1);
l1.add(15,3);
System.out.println("After Insertion in the middle");
System.out.println(l1);
}
}



Source Code:
import java.util.*;

class ArrayListDemo
{
public static void main(String[] args)
{
//Create an array list
ArrayList<String> favCric=new ArrayList<>();

//Add an element
favCric.add("Virat");
favCric.add("Rohit");
favCric.add("Smriti");
favCric.add("Dhoni");
favCric.add("Sachin");

//print the list
System.out.println(favCric);
System.out.println("Size of List: "+favCric.size());
System.out.println("Is Empty: "+favCric.isEmpty());
System.out.println("Contains Virat: "+favCric.contains("Virat"));



System.out.println("Index of Virat: "+favCric.indexOf("Virat"));
System.out.println("Contains Virat: "+favCric.contains("Virat1"));
System.out.println("Index of Virat: "+favCric.indexOf("Virat1"));
}
}


Source Code:
import java.util.*;
class ArrayListSort
{
public static void main(String[] args)
{
ArrayList<Integer> a1=new ArrayList<>();
a1.add(7);
a1.add(8);
a1.add(2);
a1.add(19);
a1.add(4);
System.out.println("Original: "+a1);
//algorithms
Collections.sort(a1);
System.out.println("Sorted (ascending):"+a1);
Collections.sort(a1,Collections.reverseOrder());
System.out.println("Sorted (descending):"+a1);
}
}


Source Code:
import java.util.*;
class Car implements Comparable<Car>
{
String cName;
String cModel;
double price;
Car(String cName, String cModel, double price)
{
this.cName=cName;
this.cModel=cModel;
this.price=price;
}
public int compareTo(Car temp)
{
if(this.price==temp.price)
{
return 0;
}
else if(this.price>temp.price)
{
return 1;
}
else
{
return -1;
}
}
public String toString()
{
return "["+this.cName+","+this.cModel+","+this.price+"]";
}
}
class CarSort
{
public static void main(String[] args)
{


ArrayList<Car> carList=new ArrayList<>();
carList.add(new Car("BMW", "i8", 2000));
carList.add(new Car("Hyundai", "i7", 18000));
carList.add(new Car("Maruti", "swift", 2100));
carList.add(new Car("Merc", "benz", 2300));
Collections.sort(carList);
for(Car tmp: carList)
{
System.out.println(tmp);
}
}
}