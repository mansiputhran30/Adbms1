-----------------------------------cookies

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1" import="javax.servlet.http.*" import="java.time.LocalDateTime"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<%
		Cookie[] cooks = request.getCookies();
		if(cooks==null)
		{
			//this is first visit
			out.println(java.time.LocalDateTime.now());
			Cookie c1 = new Cookie("cntr","1");
			response.addCookie(c1);
		}
		else
		{
			int c = 0;
			for(int i=0; i<cooks.length; i++)
			{
				if(cooks[i].getName().equals("cntr"))
				{
					c = Integer.parseInt(cooks[i].getValue());
					c++;
					out.println("This is visit number: "+c);
					cooks[i].setValue(""+c);
					response.addCookie(cooks[i]);
				}
			}
		}
	%>

</body>
</html>

---------------------------------------------JSTL with JSP

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/sql" prefix="sql"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<sql:setDataSource var="myDs" driver="org.postgresql.Driver"
		url="jdbc:postgresql://localhost:5432/postgres" user="postgres"
		password="password" scope="page" />

	<sql:query var="myQ" dataSource="${myDs}">select * from singers;</sql:query>

	<table border=1>
		<tr>
			<th>Singer's ID</th>
			<th>Singer's Name</th>
			<th>Singer's Age</th>
		</tr>

		<c:forEach var="result" items="${myQ.rows }">
			<tr>
				<td><c:out value="${result.sid}" /></td>
				<td><c:out value="${result.sname}" /></td>
				<td><c:out value="${result.age}" /></td>
			</tr>
		</c:forEach>
	</table>
</body>
</html>
----------------------------------JSP with beans

index.jsp-

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<form action="Controller.jsp">
		Enter your User name: <input type="text" name="userName"> <br>
		<br> Enter your password: <input type="password" name="password">
		<br> <input type="submit" name="submit">
	</form>
</body>
</html>

controller.jsp-

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<jsp:useBean id="userB" class="edu.met.LoginBean" scope="page">
		<jsp:setProperty name="userB" property="*"></jsp:setProperty>
	</jsp:useBean>
	<%
	if (userB.validate()) {
	%>
	<jsp:forward page="Welcome.jsp"></jsp:forward>
	<%
	} else {
	%>
	<jsp:forward page="InvalidUser.jsp"></jsp:forward>
	<%
	}
	%>

</body>
</html>

welcome.jsp-

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<h1>Welcome: <%=request.getParameter("userName") %></h1>
</body>
</html>
---------------------------------------------action tags

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
	<jsp:forward page="Next.jsp">
		<jsp:param name="name" value="Chaitanya" />
		<jsp:param name="site" value="BeginnersBook.com" />
		<jsp:param name="tutorialname" value="jsp forward action" />
		<jsp:param name="reqcamefrom" value="index.jsp" />
	</jsp:forward>
</body>
</html>

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
	pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<body>
	<jsp:include page="Welcome.jsp"></jsp:include>
	<h2>Hello this is a Page</h2>
	My name is:
	<%=request.getParameter("name")%><br> Website:
	<%=request.getParameter("site")%><br> Topic:
	<%=request.getParameter("tutorialname")%><br> Forward Request came
	from the page:
	<%=request.getParameter("reqcamefrom")%></body>


</html>


---------------------------------------------setter injection

package met.p1;

public class Employee {
	private String ename;
	private int sal;
	private int age;
	public String getEname() {
		return ename;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
	public int getSal() {
		return sal;
	}
	public void setSal(int sal) {
		this.sal = sal;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	
	public String toString()
	{
		return "Employee name: "+this.ename+"\nSalary: "+this.sal+"\nAge: "+this.age;
	}
}

<bean id="Employee" class="met.p1.Employee">
		<property name="ename" value="Mansi"></property>
		<property name="sal" value="50000"></property>
		<property name="age" value="21"></property>
</bean>

ctx = new ClassPathXmlApplicationContext("AppCtx.xml");
		Employee e1 = (Employee) ctx.getBean("Employee");
		System.out.println("Employee Details: \n"+e1);



---------------------------------------------spring boot get mapping
application.properites:
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=password

RowMapper:
public class HotelRowMapper implements RowMapper<Hotel> {
@Override
public Hotel mapRow(ResultSet rs, int rowNum) throws SQLException {
// TODO Auto-generated method stub
Hotel h1 = new Hotel();
h1.setHid(rs.getInt(1));
h1.setHname(rs.getString(2));
h1.setHcity(rs.getString(3));
h1.setRating(rs.getDouble(4));
return h1;
}

Repo:
@Repository
public class HotelRepo {
@Autowired
JdbcTemplate jdbcT;
public List<Hotel> getAll()
{
String selQ="select * from hotels";
return jdbcT.query(selQ, new HotelRowMapper());
}
public List<Hotel> getByid(int id)
{
String selQ="select * from hotels where hid="+id;
return jdbcT.query(selQ, new HotelRowMapper());
}
}

Controller:
@RestController
public class HotelDisplayController {
@Autowired
HotelRepo repo;
@GetMapping("/")
public List<Hotel> displayAll()
{
return repo.getAll();
}
@RequestMapping(value="/HotelList/{id}",method=RequestMethod.GET)
public List<Hotel> displayById(@PathVariable("id") String id)
{
return repo.getByid(Integer.parseInt(id));
}
}

Client App
@SpringBootApplication
public class HotelDisplayApplication {
public static void main(String[] args) {
SpringApplication.run(HotelDisplayApplication.class, args);
}
}

---------------------------------------------Spring JDBC Template

Product.java-

package org.me.p1;
public class Product {
public Product() {
super();
// TODO Auto-generated constructor stub
}
int pid,price;
String pname,pdesc;
public Product(int pid, String pname, int price, String pdesc)
{
super();
this.pid = pid;
this.pname = pname;
this.price = price;
this.pdesc = pdesc;
}
public int getPid() {
return pid;
}
public void setPid(int pid) {
this.pid = pid;
}
public int getPrice() {
return price;
}
public void setPrice(int price) {
this.price = price;
}
public String getPname() {
return pname;
}
public void setPname(String pname) {
this.pname = pname;
}
public String getPdesc() {
return pdesc;
}
public void setPdesc(String pdesc) {
this.pdesc = pdesc;
}
}


Appctc.xml-

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd">
<bean id="ds"
class="org.springframework.jdbc.datasource.DriverManagerDataSource">
<property name="driverClassName"
value="org.postgresql.Driver"></property>
<property name="url"
value="jdbc:postgresql://localhost:5432/postgres"></property>
<property name="username" value="postgres"></property>
<property name="password" value="password"></property>
</bean>
<bean id="Product" class="org.me.p1.Product">
<property name="pid" value="101"></property>
<property name="pname" value="T-shirt"></property>
<property name="price" value="1500"></property>
<property name="pdesc" value="Nice"></property>
</bean>
<bean id="jdbcT1" class="org.springframework.jdbc.core.JdbcTemplate">
<property name="dataSource" ref="ds"></property>
</bean>
<bean id="productD" class="org.me.p1.ProductDao">
<property name="jdbcT" ref="jdbcT1"></property>
</bean>
</beans>

ProductDao.java-

package org.me.p1;
import org.springframework.jdbc.core.JdbcTemplate;
import java.util.List;
public class ProductDao {
JdbcTemplate jdbcT;
public void setJdbcT(JdbcTemplate jdbcT) {
this.jdbcT = jdbcT;
}
public int saveProduct(Product p1)
{
String query = "insert into products values("+p1.getPid()
+",'"+p1.getPname()+"','"+p1.getPrice()+"','"+p1.getPdesc()+"')";
return jdbcT.update(query);
}
public int updateProduct(Product p1, String pname)
{
String uQuery = "update products set pname= ? where pid= ?";
return jdbcT.update(uQuery,pname,p1.getPid());
}
public List<Product> getProducts()
{
String selQ = "select * from products";
return jdbcT.query(selQ, new ProductRowMapper());
}
}

ProductTest.java-
package org.me.p1;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class ProductTest {
private static ApplicationContext ctx;
public static void main(String[] args) {
// TODO Auto-generated method stub
ctx = new ClassPathXmlApplicationContext("Appctx.xml");
Product p1 = (Product) ctx.getBean("Product");
p1.setPid(103);
p1.setPname("Dress");
p1.setPrice(2000);
p1.setPdesc("Very very nice");
ProductDao d1 = (ProductDao) ctx.getBean("productD");
p1.setPid(103);
d1.updateProduct(p1, "Gown");
System.out.println("Inserted: "+d1.saveProduct(p1));
for(Product p:d1.getProducts())
{
System.out.println("\t"+p.getPid()+"\t"+p.getPname()
+"\t"+p.getPrice()+"\t"+p.pdesc);
}
}
}
-
ProductRowMapper-

package org.me.p1;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.springframework.jdbc.core.RowMapper;
public class ProductRowMapper implements RowMapper<Product> {
@Override
public Product mapRow(ResultSet arg0, int arg1) throws SQLException {
// TODO Auto-generated method stub
Product p1 = new Product();
p1.setPid(arg0.getInt(1));
p1.setPname(arg0.getString(2));
p1.setPrice(arg0.getInt(3));
p1.setPdesc(arg0.getString(4));
return p1;
}
}


---------------------------------------------Circular Dependency

C-
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

@Component
public class C {
	D d1;
	@Autowired
	C(@Lazy D d1)
	{
		this.d1 = d1;
		System.out.println("This is C");
	}
	public void print()
	{
		System.out.println("This is Class C");
	}
}

D-
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

@Component
public class D {
	C c1;
	@Autowired
	D(@Lazy C c1)
	{
		this.c1 = c1;
		System.out.println("This is D");
	}
	public void print()
	{
		System.out.println("This is Class D");
	}
}

ClientApp-
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class CircularDependencyApplication {

	public static void main(String[] args) {
		ApplicationContext ctx=SpringApplication.run(CircularDependencyApplication.class, args);
		D d1 = ctx.getBean(D.class);
		d1.print();
	}

}

---------------------------------------------------Interface Injection

PaymentInterface-

package met.p1;

public interface PaymentInterface {
	void makePayment(double amt);
}


CashPayment-

package met.p1;

public class CashPayment implements PaymentInterface{

	@Override
	public void makePayment(double amt) {
		// TODO Auto-generated method stub
		System.out.println("Cash Payment done of rs: "+amt);
	}
	
}

CreditCardPayment-

package met.p1;

public class CreditCardPAyment implements PaymentInterface{

	@Override
	public void makePayment(double amt) {
		// TODO Auto-generated method stub
		System.out.println("Credit card payment done of rs: "+amt);
	}
	
}

PaymentService-

package met.p1;

public class PaymentService {
	PaymentInterface mode;
	double amt;
	public void setMode(PaymentInterface mode) {
		this.mode = mode;
	}
	public void setAmt(double amt) {
		this.amt = amt;
	}
	public void pay() {
		mode.makePayment(amt);
	}
}

Appctx.xml-

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
 					http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="CashPayment" class="met.p1.CashPayment" primary="true"></bean>
	<bean id="CreditCardPayment" class="met.p1.CreditCardPAyment"></bean>
	<bean id="paymentS" class="met.p1.PaymentService" autowire="byType">
		<property name="amt" value="2000"></property>
	</bean>
</beans>

PaymentClient-

package met.p1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class PaymentClient {
	private static ApplicationContext ctx;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ctx = new ClassPathXmlApplicationContext("Appctx.xml");
		PaymentService service = (PaymentService) ctx.getBean("paymentS");
		CreditCardPAyment cc = (CreditCardPAyment) ctx.getBean("CreditCardPayment");
		service.pay();
		service.setMode(cc);
		service.pay();

	}

}


----------------------------------Constructor Injection

FullName

package org.me.p1;

public class Fullname {
	private String FirstName, MiddleName, LastName;

	public Fullname() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Fullname(String firstName, String middleName, String lastName) {
		super();
		FirstName = firstName;
		MiddleName = middleName;
		LastName = lastName;
	}
	public String toString() {
		return this.FirstName + " " + this.MiddleName + " " + this.LastName;
	}
}

Teacher

package org.me.p1;

public class Teacher {
	private int tId;
	private Fullname fn;
	private String sub;
	
	public Teacher() {
		// TODO Auto-generated constructor stub
	}

	public Teacher(int tId, Fullname fn, String sub) {
		super();
		this.tId = tId;
		this.fn = fn;
		this.sub = sub;
	}
	public void display() {
		System.out.println("Teacher Id: " + this.tId);
		System.out.println("Name: " + this.fn);
		System.out.println("Subject: " + this.sub);
	}
}


Appctx.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    
    <bean id="Fullname" class="org.me.p1.Fullname">
    <constructor-arg value="Mansi"></constructor-arg>
		<constructor-arg value="R"></constructor-arg>
		<constructor-arg value="Puthran"></constructor-arg>
    </bean>       
    <bean id="Teacher" class="org.me.p1.Teacher">
    <constructor-arg value="101"></constructor-arg>
		<constructor-arg>
			<ref bean="Fullname" />
		</constructor-arg>
		<constructor-arg value="Maths"></constructor-arg>
	</bean>         
               
</beans>

TeacherApp

package org.me.p1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TeacherTest {
	private static ApplicationContext ctx;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ctx = new ClassPathXmlApplicationContext("Appctx.xml");
		Teacher t1 = (Teacher)ctx.getBean("Teacher");
		t1.display();
	}

}


----------------------------------AOP

BankAccount-

package org.me.p1;

public class BankAccount {
	private int acId;
	private String acName;
	private double acBalance;

	public int getAcId() {
		return acId;
	}

	public void setAcId(int acId) {
		this.acId = acId;
	}

	public String getAcName() {
		return acName;
	}

	public void setAcName(String acName) {
		this.acName = acName;
	}

	public double getAcBalance() {
		return acBalance;
	}

	public void setAcBalance(double acBalance) {
		this.acBalance = acBalance;
	}

	public void credit(double amt) {
		this.acBalance += amt;
	}

	public void debit(double amt) throws Exception {
		if (this.acBalance - amt > 0) {
			this.acBalance -= amt;
		} else {
			throw new Exception();
		}
	}

	public void display() {
		System.out.println("Account No: " + this.acId);
		System.out.println("Ac Name: " + this.acName);
		System.out.println("Account Balance: " + this.acBalance);
	}
}


BankAspect-

package org.me.p1;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class BankAspect {
	@Pointcut("execution (* org.me.p1.BankAccount.debit(..))")
	public void getPt() {
	}

	@AfterReturning("getPt()")
	public void afterReturn() {
		System.out.println("Debit Successful!");
	}

	@AfterThrowing("getPt()")
	public void afterThrow() {
		System.out.println("Exception Occurred!");
	}

	@Pointcut("execution (* set*(..))")
	public void setPt() {
	}

	@After("setPt()")
	public void after() {
		System.out.println("After Setter");
	}
}

Appctx.xml-

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd">
	<aop:aspectj-autoproxy />

	<bean id="BankAccount" class="org.me.p1.BankAccount">
		<property name="acId" value="101"></property>
		<property name="acName" value="Mansi Puthran"></property>
		<property name="acBalance" value="1000"></property>
	</bean>
</beans>

BankTest-

package org.me.p1;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class BankTest {
	private static ApplicationContext ctx;
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		ctx = new ClassPathXmlApplicationContext("Appctx.xml");
		BankAccount b1 = (BankAccount)ctx.getBean("BankAccount");
		b1.display();
		System.out.println("After Debit");
		b1.debit(500);
		b1.display();
		b1.setAcBalance(3000);
		b1.debit(2000);
	}
}






















